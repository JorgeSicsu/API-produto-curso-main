trigger:
  branches:
    include:
      - main  # ou o nome do seu branch

variables:
  dockerRegistryServiceConnection: 'AzureDevOpsAppConnection'  # Nome da conexão de serviço criada no Azure DevOps
  imageRepository: 'apiproduto'                                # Nome do repositório de imagem (seu app)
  containerRegistry: 'apiproduto.azurecr.io'                   # Login do seu Azure Container Registry
  dockerfilePath: 'Dockerfile'                                 # Caminho para o Dockerfile
  tag: 'latest'

stages:
  - stage: Build
    displayName: Build and Push Docker Image
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          - task: Maven@3
            displayName: 'Maven Package'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              javaHomeOption: 'JDK17'

          - task: Docker@2
            displayName: 'Build and Push Docker Image'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              repository: $(imageRepository)
              command: 'buildAndPush'
              Dockerfile: $(dockerfilePath)
              tags: |
                $(tag)

  - stage: Deploy
    displayName: Deploy to Azure App Service
    dependsOn: Build
    jobs:
      - deployment: DeployWebApp
        environment: 'production'
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureWebAppContainer@1
                  displayName: 'Deploy to App Service'
                  inputs:
                    azureSubscription: $(dockerRegistryServiceConnection)
                    appName: 'demoapi-1752806829750' # seu App Service
                    containers: |
                      $(containerRegistry)/$(imageRepository):$(tag)
